% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/codec.R
\docType{class}
\name{zarr_codec_crc32c}
\alias{zarr_codec_crc32c}
\title{Zarr CRC32C codec}
\description{
The Zarr "CRC32C" codec computes a 32-bit checksum of a raw
vector. Upon encoding the codec appends the checksum to the end of the
vector. When decoding, the final 4 bytes from the raw vector are extracted
and compared to the checksum of the remainder of the raw vector - if the
two don't match a warning is generated.
}
\section{Super classes}{
\code{\link[zarr:zarr_extension]{zarr::zarr_extension}} -> \code{\link[zarr:zarr_codec]{zarr::zarr_codec}} -> \code{zarr_codec_crc32c}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-zarr_codec_crc32c-new}{\code{zarr_codec_crc32c$new()}}
\item \href{#method-zarr_codec_crc32c-metadata_fragment}{\code{zarr_codec_crc32c$metadata_fragment()}}
\item \href{#method-zarr_codec_crc32c-encode}{\code{zarr_codec_crc32c$encode()}}
\item \href{#method-zarr_codec_crc32c-decode}{\code{zarr_codec_crc32c$decode()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="zarr" data-topic="zarr_codec" data-id="mode"><a href='../../zarr/html/zarr_codec.html#method-zarr_codec-mode'><code>zarr::zarr_codec$mode()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-zarr_codec_crc32c-new"></a>}}
\if{latex}{\out{\hypertarget{method-zarr_codec_crc32c-new}{}}}
\subsection{Method \code{new()}}{
Create a new "crc32c" codec object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{zarr_codec_crc32c$new()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
An instance of this class.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-zarr_codec_crc32c-metadata_fragment"></a>}}
\if{latex}{\out{\hypertarget{method-zarr_codec_crc32c-metadata_fragment}{}}}
\subsection{Method \code{metadata_fragment()}}{
Return the metadata fragment that describes this codec.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{zarr_codec_crc32c$metadata_fragment()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list with the metadata of this codec.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-zarr_codec_crc32c-encode"></a>}}
\if{latex}{\out{\hypertarget{method-zarr_codec_crc32c-encode}{}}}
\subsection{Method \code{encode()}}{
This method computes the CRC32C checksum of a data object
and appends it to the data object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{zarr_codec_crc32c$encode(data)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{The data whose checksum to compute.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The input \code{data} object with the 32-bit checksum appended to it.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-zarr_codec_crc32c-decode"></a>}}
\if{latex}{\out{\hypertarget{method-zarr_codec_crc32c-decode}{}}}
\subsection{Method \code{decode()}}{
This method extracts the CRC32C checksum from the trailing
32-bits of a data object. It then computes the CRC32C checksum from the
data object (less the trailing 32-bits) and compares the two values. If
the values differ, a warning will be issued.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{zarr_codec_crc32c$decode(data)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{The data whose checksum to verify.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The \code{data} object with the trailing 32-bits removed.
}
}
}
